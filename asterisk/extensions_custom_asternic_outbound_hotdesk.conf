; This macro will override dialout in freepbx and will track in Asternic outbound
; calls. To use in conjunction with the hotdesk fop2 plugin as an agent console

[macro-dialout-trunk-predial-hook]
exten => s,1,Noop(Test Track Outbound)
exten => s,n,GotoIf($["${CHANNEL:0:5}" = "Local"]?dolocal)

; Set variables when dial from phone directly
exten => s,n,Set(REALCHAN=${CUT(CHANNEL,-,1)})
exten => s,n,Set(VIRTUAL=${DB(hotdeskmap/${REALCHAN})})

; Si es llamado directo, y no existe hotdeskmap, verificar que sea una extension real
exten => s,n,ExecIf($["${VIRTUAL}" = ""]?Set(VIRTUAL=${CUT(REALCHAN,/,2)}))
exten => s,n,Set(REAL=${DB(AMPUSER/${VIRTUAL}/device)})

; Si no tiene device definido en astdb, asumimos que no esta logueado
exten => s,n,GotoIf($["${REAL}" = ""]?noestalogueado)
exten => s,n,Goto(setmore)
exten => s,n(noestalogueado),Playback(option-is-invalid)
exten => s,n,Hangup

; Set variables from Local chan (originating from FOP2)
exten => s,n(dolocal),Set(CHAN=${CUT(CHANNEL,@,1)})
exten => s,n,Set(CHAN=${CUT(CHAN,/,2)})
exten => s,n,Set(VIRTUAL=${CHAN})
exten => s,n,Set(REAL=${DB(AMPUSER/${VIRTUAL}/device)})
exten => s,n,Set(REALCHAN=${DB(DEVICE/${REAL}/dial)})

; Continue
exten => s,n(setmore),Set(QDIALER_AGENT=${DB(AMPUSER/${VIRTUAL}/cidname)})
exten => s,n,Set(QDIALER_QUEUE=${DB(previewcampaign/${REALCHAN})})
exten => s,n,GotoIf($["${QDIALER_QUEUE}" != ""]?setprefix)
exten => s,n,Set(QDIALER_QUEUE=${DB(profile/${REALCHAN})})
exten => s,n(setprefix),Set(DIAL_PREFIX=${DB(dialprefix/${QDIALER_QUEUE})})

exten => s,n(continue),Noop(Trunk is ${OUT_${DIAL_TRUNK}})
exten => s,n,Noop(Dialout number is ${OUTNUM})
exten => s,n,Noop(Dial options are ${DIAL_TRUNK_OPTIONS})
exten => s,n,GotoIf($["${QDIALER_AGENT}" != ""]?nextcheck)
exten => s,n,Noop(NO AGENT?, exit normally with no tracking outbound)
exten => s,n,MacroExit()
exten => s,n(nextcheck),GotoIf($["${QDIALER_QUEUE}" != ""]?bypass)
exten => s,n,Noop(NO QUEUE, exit normally with no tracking outbound)
exten => s,n,MacroExit()
exten => s,n(bypass),Set(PREDIAL_HOOK_RET=BYPASS)
exten => s,n,Goto(queuedial,${DIAL_PREFIX}${OUTNUM},1)
exten => s,n,MacroExit()

;; Dialplan for storing OUTBOUND campaing in queue_log
;; Goto(queuedial,YYYXXXXXXXX,1) where YYY is the queue-campaign code
;; and XXXXXXXX is the number to dial.
;; The queuedial context has the outobound trunk hardcoded

[queuedial]
; this piece of dialplan is just a calling hook into the [qlog-queuedial] context that actually does the
; outbound dialing - replace as needed - just fill in the same variables.
exten => _X.,1,Noop(QDIALER_QUEUE ${QDIALER_QUEUE})
exten => _X.,n,Noop(QDIALER_AGENT ${QDIALER_AGENT})
exten => _X.,n,Set(QDIALER_CHANNEL=${OUT_${DIAL_TRUNK}}/${EXTEN})
exten => _X.,n,Set(MIXAG=${REPLACE(QDIALER_AGENT, ,_)})
exten => _X.,n,Set(MIXQ=${REPLACE(QDIALER_QUEUE, ,_)})
exten => _X.,n,MixMonitor(${MIXQ}-${MIXAG}-${UNIQUEID}.wav,b,/usr/local/parselog/update_mix_mixmonitor.pl ${UNIQUEID} ${MIXQ}-${MIXAG}-${UNIQUEID}.wav)
exten => _X.,n,Goto(qlog-queuedial,${EXTEN},1)

[qlog-queuedial]
; We use a global variable to pass values back from the answer-detect macro.
; STATUS = U unanswered
;        = A answered    (plus CAUSECOMPLETE=C when callee hung up)
; The 'g' dial parameter must be used in order to track callee disconnecting.
; Note that we'll be using the 'h' hook in any case to do the logging when channels go down.
;
exten => _X.,1,NoOp(Outbound call -> A:${QDIALER_AGENT} N:${EXTEN} Q:${QDIALER_QUEUE} Ch:${QDIALER_CHANNEL})
exten => _X.,n,Set(ST=${EPOCH})
exten => _X.,n,Set(GM=${REPLACE(QDIALER_AGENT, ,_)})
exten => _X.,n,Set(GLOBAL(${GM})=U)
exten => _X.,n,Set(GLOBAL(${GM}ans)=0)
exten => _X.,n,Macro(queuelog,${ST},${UNIQUEID},${QDIALER_QUEUE},${QDIALER_AGENT},ENTERQUEUE,-,${EXTEN})
exten => _X.,n,Set(CDR(accountcode)=${QDIALER_QUEUE})
exten => _X.,n,Dial(${QDIALER_CHANNEL},300,gM(queuedial-answer^${UNIQUEID}^${GM}^${QDIALER_QUEUE}^${QDIALER_AGENT}^${ST})${DIAL_TRUNK_OPTIONS})
exten => _X.,n,Set(CAUSECOMPLETE=${IF($["${DIALSTATUS}" = "ANSWER"]?C)})

; Trapping call termination here
exten => h,1,NoOp( "Call exiting: status ${GLOBAL(${GM})} answered at: ${GLOBAL(${GM}ans)} DS: ${DIALSTATUS}"  )
exten => h,n,Set(DB(LASTDIAL/${GM})=${EPOCH})
exten => h,n,Goto(case-${GLOBAL(${GM})})
exten => h,n,Hangup()

; Call unanswered
exten => h,n(case-U),Set(WT=$[${EPOCH} - ${ST}])
exten => h,n,Macro(queuelog,${EPOCH},${UNIQUEID},${QDIALER_QUEUE},${QDIALER_AGENT},${DIALSTATUS},1,1,${WT})
exten => h,n,UserEvent(AgentComplete,Campaign: ${QDIALER_QUEUE},Queue: ${REALQUEUE},TalkTime: ${CT},NumberId: ${DIALERNUMID},Channel: SIP/${VIRTUAL})
exten => h,n,Hangup()

; call answered: agent/callee hung
exten => h,n(case-A),Set(COMPLETE=${IF($["${CAUSECOMPLETE}" = "C"]?COMPLETECALLER:COMPLETEAGENT)})
exten => h,n,Set(WT=$[${GLOBAL(${GM}ans)} - ${ST}])
exten => h,n,Set(CT=$[${EPOCH} - ${GLOBAL(${GM}ans)}])
exten => h,n,Macro(queuelog,${EPOCH},${UNIQUEID},${QDIALER_QUEUE},${QDIALER_AGENT},${COMPLETE},${WT},${CT})

; fire userevent, find real channel when Local
exten => h,n,GotoIf($["${CHANNEL:0:5}" != "Local"]?notlocal)
exten => h,n(islocal),Set(CHAN=${CUT(CHANNEL,@,1)})
exten => h,n,Set(CHAN=${CUT(CHAN,/,2)})
exten => h,n,Set(VIRTUAL=${CHAN})
exten => h,n,Goto(doevent)
exten => h,n(notlocal),Set(REALCHAN=${CUT(CHANNEL,-,1)})
exten => h,n,Set(VIRTUAL=${DB(hotdeskmap/${REALCHAN})})
exten => h,n(doevent),UserEvent(POPUPAGENTCOMPLETE,Channel: VIRTUAL/${VIRTUAL},Value: ${UNIQUEID},Family: POPUPAGENTCOMPLETE)
exten => h,n,Set(REALQUEUE=${CUT(DIALERID,!,4)})
exten => h,n,Set(DIALERNUMID=${CUT(DIALERID,!,1)})
exten => h,n,UserEvent(POPUPAGENTCOMPLETE,Channel: CUSTOM/${VIRTUAL},Value: ${UNIQUEID},Family: POPUPAGENTCOMPLETE)
exten => h,n,UserEvent(AgentComplete,Queue: ${QDIALER_QUEUE},TalkTime: ${CT},Channel: CUSTOM/${VIRTUAL})
exten => h,n,UserEvent(AgentComplete,Queue: ${QDIALER_QUEUE},TalkTime: ${CT},Channel: VIRTUAL/${VIRTUAL})
exten => h,n,UserEvent(AgentComplete,Campaign: ${QDIALER_QUEUE},Queue: ${REALQUEUE},TalkTime: ${CT},NumberId: ${DIALERNUMID},Channel: SIP/${VIRTUAL})

exten => h,n,Hangup()

[macro-queuedial-answer]
; Expecting $ARG1: uniqueid of the caller channel
;           $ARG2: global variable to store the answer results
;           $ARG3: queue name
;           $ARG4: agent name
;           $ARG5: enterqueue
;
exten => s,1,NoOp("Macro: queuedial-answer UID:${ARG1} GR:${ARG2} Q:${ARG3} A:${ARG4} E:${ARG5}")
exten => s,n,Set(NOW=${EPOCH})
exten => s,n,Set(WD=$[${NOW} - ${ARG5}])
exten => s,n,Macro(queuelog,${NOW},${ARG1},${ARG3},${ARG4},CONNECT,${WD})
exten => s,n,Set(GLOBAL(${ARG2})=A)
exten => s,n,Set(GLOBAL(${ARG2}ans)=${NOW})
exten => s,n,NoOp("Macro queuedial-answer terminating" )

[macro-queuelog]
; The advantage of using this macro is that you can choose whether to use the Shell version
; (where you have complete control of what gets written) or the Application version (where you
; do not need a shellout, so it's way faster).
;
; Expecting  $ARG1: Timestamp
;            $ARG2: Call-id
;            $ARG3: Queue
;            $ARG4: Agent
;            $ARG5: Verb
;            $ARG6: Param1
;            $ARG7: Param2
;            $ARG8: Param3
;
;exten => s,1,System( echo "${ARG1},${ARG2},${ARG3,${ARG4},${ARG5},${ARG6},${ARG7},${ARG8}" >> /var/log/asterisk/queue_log )
exten => s,1,QueueLog(${ARG3},${ARG2},${ARG4},${ARG5},${ARG6}|${ARG7}|${ARG8})



;[macro-user-callerid]
;include => macro-user-callerid-custom
;exten => s,1,Set(TOUCH_MONITOR=${UNIQUEID})
;; Addition by Asternic to catch transfers on Asterisk 11 and *log* them in queue_log as UPDATETRANSFER
;exten => s,n,GotoIf($["${MACRO_CONTEXT}" = "from-internal-xfer"]?trq)
;exten => s,n,Goto(resume)
;exten => s,n(trq),GotoIf($["x${QUEUENUM}" = "x"]?resume)
;exten => s,n,Set(AGCHAN=${CUT(BLINDTRANSFER,-,1)})
;exten => s,n,Set(VIRTUAL=${DB(hotdeskmap/${AGCHAN})})
;exten => s,n,Set(AGNAME=${DB(AMPUSER/${VIRTUAL}/cidname)})
;exten => s,n,GotoIf($["x${AGNAME}" = "x"]?resume)
;exten => s,n,QueueLog(${QUEUENUM},${UNIQUEID},${AGNAME},UPDATETRANSFER,${MACRO_EXTEN}|${MACRO_CONTEXT})
;; End Asternic Addition
;exten => s,n(resume),Set(AMPUSER=${IF($["${AMPUSER}" = ""]?${CALLERID(number)}:${AMPUSER})})
;exten => s,n,GotoIf($["${CUT(CHANNEL,@,2):5:5}"="queue" | ${LEN(${AMPUSERCIDNAME})}]?report)
;exten => s,n,ExecIf($["${REALCALLERIDNUM:1:2}" = ""]?Set(REALCALLERIDNUM=${CALLERID(number)}))
;exten => s,n,Set(AMPUSER=${DB(DEVICE/${REALCALLERIDNUM}/user)})
;exten => s,n,GotoIf($["${AMPUSER}" = "none"]?limit)
;exten => s,n,Set(AMPUSERCIDNAME=${DB(AMPUSER/${AMPUSER}/cidname)})
;exten => s,n,GotoIf($["${AMPUSERCIDNAME:1:2}" = ""]?report)
;exten => s,n,Set(AMPUSERCID=${IF($["${ARG2}" != "EXTERNAL" & "${DB_EXISTS(AMPUSER/${AMPUSER}/cidnum)}" = "1"]?${DB_RESULT}:${AMPUSER})})
;exten => s,n,Set(__DIAL_OPTIONS=${IF($["${DB_EXISTS(AMPUSER/${AMPUSER}/dialopts)}" = "1"]?${DB_RESULT}:${DIAL_OPTIONS})})
;exten => s,n,Set(CALLERID(all)="${AMPUSERCIDNAME}" <${AMPUSERCID}>)
;exten => s,n,GotoIf($["${ARG1}"="LIMIT" & ${LEN(${AMPUSER})} & "${DB(AMPUSER/${AMPUSER}/concurrency_limit)}">"0" & "${GROUP_COUNT(${AMPUSER}@concurrency_limit)}">="${DB(AMPUSER/${AMPUSER}/concurrency_limit)}"]?limit)
;exten => s,n,ExecIf($["${ARG1}"="LIMIT" & ${LEN(${AMPUSER})}]?Set(GROUP(concurrency_limit)=${AMPUSER}))
;exten => s,n,ExecIf($["${DB(AMPUSER/${AMPUSER}/language)}" != ""]?Set(CHANNEL(language)=${DB(AMPUSER/${AMPUSER}/language)}))
;exten => s,n(report),GotoIf($[ "${ARG1}" = "SKIPTTL" | "${ARG1}" = "LIMIT" ]?continue)
;exten => s,n(report2),Set(__TTL=${IF($["foo${TTL}" = "foo"]?64:$[ ${TTL} - 1 ])})
;exten => s,n,GotoIf($[ ${TTL} > 0 ]?continue)
;exten => s,n,Wait(${RINGTIMER})
;exten => s,n,Answer
;exten => s,n,Wait(1)
;exten => s,n,Playback(im-sorry&an-error-has-occured&with&call-forwarding)
;exten => s,n,Macro(hangupcall,)
;exten => s,n(limit),Answer
;exten => s,n,Wait(1)
;exten => s,n,Playback(beep&im-sorry&your&simul-call-limit-reached&goodbye)
;exten => s,n,Macro(hangupcall,)
;exten => s,n,Congestion(20)
;exten => s,n(continue),Set(CALLERID(number)=${CALLERID(number):0:40})
;exten => s,n,Set(CALLERID(name)=${CALLERID(name):0:40})
;exten => s,n,Set(CDR(cnum)=${CALLERID(num)})
;exten => s,n,Set(CDR(cnam)=${CALLERID(name)})
;exten => s,n,Set(CHANNEL(language)=${MASTER_CHANNEL(CHANNEL(language))})
;
;exten => h,1,Macro(hangupcall,)
;
;;--== end of [macro-user-callerid] ==--;

